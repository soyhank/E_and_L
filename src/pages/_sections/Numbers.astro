---
import { Image } from "astro:assets";
import bgDarkImage from "../../assets/img/home/bg-image-dark.avif";

const items: { number: number; title: string; plus?: boolean }[] = [
  {
    number: 232,
    title: "Happy Clients",
    plus: true,
  },
  {
    number: 521,
    title: "Projects completed",
  },
  {
    number: 17,
    title: "Hard Workers",
  },
];
---

<section class="w-full section-numbers">
  <div
    class="container relative m-auto flex flex-wrap md:flex-nowrap items-center justify-evenly py-12 min-h-[400px] text-white"
  >
    <Image
      src={bgDarkImage}
      alt={"E & L"}
      style={{ objectFit: "cover", position: "absolute", zIndex: -1 }}
    />
    {
      items.map((item) => {
        return (
          <div class="flex flex-col items-center gap-2">
            <div class="flex gap-1">
              <span data-number class="text-6xl font-bold">
                {item.number}
              </span>
              {item.plus && <span class="text-6xl font-bold">+</span>}
            </div>
            <span class="text-xl">{item.title}</span>
          </div>
        );
      })
    }
  </div>
</section>

<script>
  const sectionNumbers = document.querySelector(
    ".section-numbers"
  )! as HTMLDivElement;
  const numbersSpan = sectionNumbers.querySelectorAll(
    "span[data-number]"
  ) as NodeListOf<HTMLSpanElement>;

  function animateValue(
    obj: HTMLSpanElement,
    start: number,
    end: number,
    duration: number
  ) {
    let startTimestamp: number | null = null;
    const step = (timestamp: number) => {
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      obj.innerHTML = Math.floor(progress * (end - start) + start).toString();
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        observer.unobserve(sectionNumbers);
        numbersSpan.forEach((span) => {
          animateValue(span, 0, Number(span.innerText), 3000);
        });
      }
    });
  });

  if (sectionNumbers) {
    observer.observe(sectionNumbers);
  }
</script>
